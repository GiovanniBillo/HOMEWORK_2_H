knitr::opts_chunk$set(echo = TRUE)
mu_hat = mean(houses$price)
url_houses = "https://stat4ds.rwth-aachen.de/data/Houses.dat"
houses <- read.table(url_houses, header = TRUE)
houses <- read.table(url_houses, header = TRUE)
head(houses)
likelihood_normal <- function(mu, sigma2, data) {
n <- length(data)
constant <- 1 / sqrt(2 * pi * sigma2)
exponent <- exp(-((data - mu)^2) / (2 * sigma2))
likelihood <- prod(constant * exponent)
return(-likelihood)
}
mu_hat = mean(houses$price)
s2_hat = var(houses$price)
ML_sigma = optim(
par = s2_hat,  # Initial guess for sigma^2
fn = likelihood_normal,
mu = mu_hat,
data = houses$price,
method = "L-BFGS-B",
lower = 1e-6  # Ensure sigma^2 > 0
)
ML_mu = optim(
par = mu_hat,  # Initial guess for sigma^2
fn = likelihood_normal,
sigma = s2_hat,
data = houses$price,
method = "L-BFGS-B",
lower = 1e-6  # Ensure sigma^2 > 0
)
mu_hat = mean(houses$price)
s2_hat = var(houses$price)
ML_sigma = optim(
par = s2_hat,  # Initial guess for sigma^2
fn = likelihood_normal,
mu = mu_hat,
data = houses$price,
method = "L-BFGS-B",
lower = 1e-6  # Ensure sigma^2 > 0
)
ML_mu = optim(
par = mu_hat,  # Initial guess for sigma^2
fn = likelihood_normal,
sigma = s2_hat,
data = houses$price,
method = "L-BFGS-B",
lower = 1e-6  # Ensure sigma^2 > 0
)
comparison <- data.frame(
Quantity = c("Mean", "Variance"),
MLE_Function = c(ML_mu$par, ML_sigma$par),
Built_in_Function = c(mu_hat, s2_hat)
)
comparison
log_likelihood_normal <- function(mu, sigma2, data) {
#browser()
n <- length(data)
log_constant <- -n / 2 * log(2 * pi * sigma2)  # Logarithm of the constant term
sum_squared <- sum((data - mu)^2)             # Sum of squared deviations
log_exponent <- -sum_squared / (2 * sigma2)   # Logarithm of the exponent
log_likelihood <- log_constant + log_exponent
return(-log_likelihood)  # Return the negative log-likelihood for optimization
}
log_likelihood_normal(mu_hat, s2_hat, houses$price)
Log_ML_sigma = optim(
par = s2_hat,  # Initial guess for sigma^2
fn = log_likelihood_normal,
mu = mu_hat,
data = houses$price,
method = "L-BFGS-B",
lower = 1e-6  # Ensure sigma^2 > 0
)
Log_ML_mu = optim(
par = mu_hat,  # Initial guess for sigma^2
fn = log_likelihood_normal,
sigma = s2_hat,
data = houses$price,
method = "L-BFGS-B",
lower = 1e-6  # Ensure sigma^2 > 0
)
comparison <- data.frame(
Quantity = c("Mean", "Variance"),
MLE_Function = c(Log_ML_mu$par, Log_ML_sigma$par),
Built_in_Function = c(mu_hat, s2_hat)
)
comparison
# Load required libraries
library(ggplot2)
# Load required libraries
library(ggplot2)
# Example data: Replace with your data
data <- houses$price
# Fit the Normal distribution
mu_normal <- mean(data)       # Mean
sigma_normal <- sd(data)      # Standard deviation
# Fit the Log-Normal distribution
log_data <- log(data)         # Log-transform the data
mu_log <- mean(log_data)      # Mean of log-transformed data
sigma_log <- sd(log_data)     # Std dev of log-transformed data
# Histogram of the data
ggplot(data = data.frame(price = data), aes(x = price)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black") +
# Add Normal PDF
stat_function(
fun = dnorm,
args = list(mean = mu_normal, sd = sigma_normal),
color = "red",
size = 1.2,
aes(linetype = "Normal")
) +
# Add Log-Normal PDF
stat_function(
fun = function(x) dlnorm(x, meanlog = mu_log, sdlog = sigma_log),
color = "green",
size = 1.2,
aes(linetype = "Log-Normal")
) +
# Labels and Legend
labs(
title = "Histogram with Fitted Normal and Log-Normal Distributions",
x = "Selling Prices",
y = "Density",
linetype = "Distribution"
) +
theme_minimal()
y = 3
my_llik <- function(y, pi){
exponent = sum((1:y) - 1)
return(pi*(1 - pi)^exponent)
}
pi_vec = seq(from = 0.1, to = 1, by = 0.01)
llik_vector = sapply(pi_vec, function(pi) my_llik(3, pi))
max_pi = print(pi_vec[which.max(llik_vector)])
plot(pi_vec, llik_vector, type = "l", col = "blue", lwd = 2,
xlab = expression(pi), ylab = "Likelihood",
main = "ML of a Geometric RV with Y = 3")
max_pi = print(pi_vec[which.max(llik_vector)])
